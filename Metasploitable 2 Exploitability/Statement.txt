		Assignment #3 (28th Dec 2020) 

Metasploitable 2 Exploitability 

The Metasploitable virtual machine is an intentionally vulnerable version of Ubuntu  
Linux designed for testing security tools and demonstrating common vulnerabilities.  
Version 2 of this virtual machine is available for download and ships with even more  
vulnerabilities than the original image. This virtual machine is compatible with  
VMWare, VirtualBox, and other common virtualization platforms. By default,  
Metasploitable's network interfaces are bound to the NAT and Host-only network  
adapters, and the image should never be exposed to a hostile network. 
Metasploitable 2 is available at: 
∙ https://information.rapid7.com/metasploitable-download.html 
∙ https://sourceforge.net/projects/metasploitable/ 

The compressed file is about 800 MB and can take up to 30 minutes to download.  
After you have downloaded the Metasploitable 2 file, you will need to unzip the file to  see its contents. 


Powering on Metasploitable 2  
Once the VM is available on your desktop, open the device, and run it with VMWare  or VirtualBox. 

Logging in to Metasploitable 2  
After the virtual machine boots, login to console with username msfadmin and  password msfadmin. 

Getting Started  
From the shell, run the ifconfig command to identify the IP address. 

Services  
From our attack system (Linux, preferably something like Kali Linux), we will identify  
the open network services on this virtual machine using the Nmap Security Scanner.  

Gather following information: 
∙ The IP address 
∙ The host name 
∙ The operating system 
∙ The active services 
∙ The timestamp when the host was last updated 
∙ The host status

Vulnerable Web Services  
Metasploitable 2 has deliberately vulnerable web applications pre-installed. The web  
server starts automatically when Metasploitable 2 is booted. To access the web  
applications, open a web browser and enter the URL http://<IP> where <IP> is the IP  
address of Metasploitable 2. One way to accomplish this is to install Metasploitable 2  
as a guest operating system in Virtual Box and change the network interface settings  
from "NAT" to "Host Only". For example, Metasploitable 2 is running at IP  192.168.56.101. 
Browsing to http://192.168.56.101/ shows the web application home  page. 

To access a particular web application, click on one of the links provided. Individual  
web applications may additionally be accessed by appending the application directory  
name onto http://<IP> to create URL http://<IP>/<Application Folder>/. For example,  
the Mutillidae application may be accessed (for example) at address  http://192.168.56.101/mutillidae/. 
The applications are installed in Metasploitable 2 in  the /var/www directory. (Note: See a list with command ls /var/www.) 
In the current  version as of this writing, the applications are 
∙ mutillidae (NOWASP Mutillidae 2.1.19) 
∙ dvwa (Damn Vulnerable Web Application) 
∙ phpMyAdmin 
∙ tikiwiki (TWiki) 
∙ tikiwiki-old 
∙ dav (WebDav) 

1. Mutillidae 
The Mutillidae web application (NOWASP (Mutillidae)) contains all of the  vulnerabilities from the OWASP Top Ten plus a number of other vulnerabilities such  as HTML-5 web storage, forms caching, and click-jacking. Inspired by DVWA,  Mutillidae allows the user to change the "Security Level" from 0 (completely insecure)  to 5 (secure). Additionally three levels of hints are provided ranging from "Level 0 - I  try harder" (no hints) to "Level 2 - noob" (Maximum hints). If the application is damaged  by user injections and hacks, clicking the "Reset DB" button resets the application to  its original state. Enable hints in the application by click the "Toggle Hints" button on  the menu bar. 
The Mutillidae application contains numerous vulnerabilities on these respective  pages. You need to identify the web pages with following vulnerabilities using ZAP  and/or Nessus (or any other tools such as W3af, Wapiti etc.): 

i. SQL Injection on blog entry 
ii. Cross-site request forgery 
iii. JavaScript validation bypass 
iv. XSS via referer HTTP header 
v. Cross site scripting 
vi. SQL injection 
vii. JavaScript injection
viii. JSON injection 
ix. Denial of Service if you fill up the log x. Cascading style sheet injection xi. Any other known vulnerabilities
